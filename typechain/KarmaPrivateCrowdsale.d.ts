/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface KarmaPrivateCrowdsaleInterface extends ethers.utils.Interface {
  functions: {
    "balanceOf(address)": FunctionFragment;
    "buyTokens(address,uint256)": FunctionFragment;
    "canRefundable()": FunctionFragment;
    "capReached()": FunctionFragment;
    "getClosingTime()": FunctionFragment;
    "getContribution(address)": FunctionFragment;
    "getOpeningTime()": FunctionFragment;
    "getRaiseAmountFromSaleAmount(uint256)": FunctionFragment;
    "getRaiseToken()": FunctionFragment;
    "getRaiseTokenBalance()": FunctionFragment;
    "getRate()": FunctionFragment;
    "getSaleAmountFromRaiseAmount(uint256)": FunctionFragment;
    "getSaleCap()": FunctionFragment;
    "getSaleLimit()": FunctionFragment;
    "getSaleToken()": FunctionFragment;
    "getSaleTokenBalance()": FunctionFragment;
    "getVestingVault()": FunctionFragment;
    "isFinished()": FunctionFragment;
    "isOpen()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setRate(uint256)": FunctionFragment;
    "setSaleCap(uint256,uint256)": FunctionFragment;
    "setSaleLimit(uint256,uint256)": FunctionFragment;
    "setTime(uint256,uint256)": FunctionFragment;
    "setVestingVault(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "buyTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canRefundable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "capReached",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClosingTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContribution",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpeningTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRaiseAmountFromSaleAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRaiseToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRaiseTokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSaleAmountFromRaiseAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSaleCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSaleLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSaleToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSaleTokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isFinished",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isOpen", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSaleCap",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSaleLimit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTime",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVestingVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canRefundable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "capReached", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClosingTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpeningTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRaiseAmountFromSaleAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRaiseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRaiseTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSaleAmountFromRaiseAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSaleCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSaleLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSaleToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSaleTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isFinished", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOpen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setSaleCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSaleLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVestingVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "CrowdsaleRaiseTokenUpdated(address)": EventFragment;
    "CrowdsaleRaiseWalletUpdated(address)": EventFragment;
    "CrowdsaleRateUpdated(uint256)": EventFragment;
    "CrowdsaleRefund(address,uint256)": EventFragment;
    "CrowdsaleSaleTokenUpdated(address)": EventFragment;
    "CrowdsaleTokensPurchased(address,address,uint256,uint256)": EventFragment;
    "CrowdsaleVestingVaultUpdated(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CrowdsaleRaiseTokenUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CrowdsaleRaiseWalletUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CrowdsaleRateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CrowdsaleRefund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CrowdsaleSaleTokenUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CrowdsaleTokensPurchased"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CrowdsaleVestingVaultUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type CrowdsaleRaiseTokenUpdatedEvent = TypedEvent<
  [string] & { raiseToken: string }
>;

export type CrowdsaleRaiseWalletUpdatedEvent = TypedEvent<
  [string] & { raiseWallet: string }
>;

export type CrowdsaleRateUpdatedEvent = TypedEvent<
  [BigNumber] & { rate: BigNumber }
>;

export type CrowdsaleRefundEvent = TypedEvent<
  [string, BigNumber] & { purchaser: string; arg1: BigNumber }
>;

export type CrowdsaleSaleTokenUpdatedEvent = TypedEvent<
  [string] & { saleToken: string }
>;

export type CrowdsaleTokensPurchasedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    purchaser: string;
    beneficiary: string;
    saleAmount: BigNumber;
    raiseAmount: BigNumber;
  }
>;

export type CrowdsaleVestingVaultUpdatedEvent = TypedEvent<
  [string, string] & { newVestingVault: string; prevVestingVault: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class KarmaPrivateCrowdsale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: KarmaPrivateCrowdsaleInterface;

  functions: {
    balanceOf(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buyTokens(
      beneficiary: string,
      raiseAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    canRefundable(overrides?: CallOverrides): Promise<[boolean]>;

    capReached(
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean] & {
        minSaleCapReached: boolean;
        maxSaleCapReached: boolean;
      }
    >;

    getClosingTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getContribution(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOpeningTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRaiseAmountFromSaleAmount(
      saleAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRaiseToken(overrides?: CallOverrides): Promise<[string]>;

    getRaiseTokenBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSaleAmountFromRaiseAmount(
      raiseAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSaleCap(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { minSaleCap: BigNumber; maxSaleCap: BigNumber }
    >;

    getSaleLimit(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        minSaleLimit: BigNumber;
        maxSaleLimit: BigNumber;
      }
    >;

    getSaleToken(overrides?: CallOverrides): Promise<[string]>;

    getSaleTokenBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVestingVault(overrides?: CallOverrides): Promise<[string]>;

    isFinished(overrides?: CallOverrides): Promise<[boolean]>;

    isOpen(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRate(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSaleCap(
      minSaleCap: BigNumberish,
      maxSaleCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSaleLimit(
      minSaleLimit: BigNumberish,
      maxSaleLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTime(
      openingTime: BigNumberish,
      closingTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVestingVault(
      vestingVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  balanceOf(beneficiary: string, overrides?: CallOverrides): Promise<BigNumber>;

  buyTokens(
    beneficiary: string,
    raiseAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  canRefundable(overrides?: CallOverrides): Promise<boolean>;

  capReached(
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean] & {
      minSaleCapReached: boolean;
      maxSaleCapReached: boolean;
    }
  >;

  getClosingTime(overrides?: CallOverrides): Promise<BigNumber>;

  getContribution(
    beneficiary: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOpeningTime(overrides?: CallOverrides): Promise<BigNumber>;

  getRaiseAmountFromSaleAmount(
    saleAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRaiseToken(overrides?: CallOverrides): Promise<string>;

  getRaiseTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getRate(overrides?: CallOverrides): Promise<BigNumber>;

  getSaleAmountFromRaiseAmount(
    raiseAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSaleCap(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { minSaleCap: BigNumber; maxSaleCap: BigNumber }
  >;

  getSaleLimit(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      minSaleLimit: BigNumber;
      maxSaleLimit: BigNumber;
    }
  >;

  getSaleToken(overrides?: CallOverrides): Promise<string>;

  getSaleTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getVestingVault(overrides?: CallOverrides): Promise<string>;

  isFinished(overrides?: CallOverrides): Promise<boolean>;

  isOpen(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRate(
    rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSaleCap(
    minSaleCap: BigNumberish,
    maxSaleCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSaleLimit(
    minSaleLimit: BigNumberish,
    maxSaleLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTime(
    openingTime: BigNumberish,
    closingTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVestingVault(
    vestingVault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOf(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyTokens(
      beneficiary: string,
      raiseAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    canRefundable(overrides?: CallOverrides): Promise<boolean>;

    capReached(
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean] & {
        minSaleCapReached: boolean;
        maxSaleCapReached: boolean;
      }
    >;

    getClosingTime(overrides?: CallOverrides): Promise<BigNumber>;

    getContribution(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpeningTime(overrides?: CallOverrides): Promise<BigNumber>;

    getRaiseAmountFromSaleAmount(
      saleAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRaiseToken(overrides?: CallOverrides): Promise<string>;

    getRaiseTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getRate(overrides?: CallOverrides): Promise<BigNumber>;

    getSaleAmountFromRaiseAmount(
      raiseAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSaleCap(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { minSaleCap: BigNumber; maxSaleCap: BigNumber }
    >;

    getSaleLimit(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        minSaleLimit: BigNumber;
        maxSaleLimit: BigNumber;
      }
    >;

    getSaleToken(overrides?: CallOverrides): Promise<string>;

    getSaleTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getVestingVault(overrides?: CallOverrides): Promise<string>;

    isFinished(overrides?: CallOverrides): Promise<boolean>;

    isOpen(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setRate(rate: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setSaleCap(
      minSaleCap: BigNumberish,
      maxSaleCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSaleLimit(
      minSaleLimit: BigNumberish,
      maxSaleLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTime(
      openingTime: BigNumberish,
      closingTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setVestingVault(
      vestingVault: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CrowdsaleRaiseTokenUpdated(address)"(
      raiseToken?: null
    ): TypedEventFilter<[string], { raiseToken: string }>;

    CrowdsaleRaiseTokenUpdated(
      raiseToken?: null
    ): TypedEventFilter<[string], { raiseToken: string }>;

    "CrowdsaleRaiseWalletUpdated(address)"(
      raiseWallet?: null
    ): TypedEventFilter<[string], { raiseWallet: string }>;

    CrowdsaleRaiseWalletUpdated(
      raiseWallet?: null
    ): TypedEventFilter<[string], { raiseWallet: string }>;

    "CrowdsaleRateUpdated(uint256)"(
      rate?: null
    ): TypedEventFilter<[BigNumber], { rate: BigNumber }>;

    CrowdsaleRateUpdated(
      rate?: null
    ): TypedEventFilter<[BigNumber], { rate: BigNumber }>;

    "CrowdsaleRefund(address,uint256)"(
      purchaser?: null,
      undefined?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { purchaser: string; arg1: BigNumber }
    >;

    CrowdsaleRefund(
      purchaser?: null,
      undefined?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { purchaser: string; arg1: BigNumber }
    >;

    "CrowdsaleSaleTokenUpdated(address)"(
      saleToken?: null
    ): TypedEventFilter<[string], { saleToken: string }>;

    CrowdsaleSaleTokenUpdated(
      saleToken?: null
    ): TypedEventFilter<[string], { saleToken: string }>;

    "CrowdsaleTokensPurchased(address,address,uint256,uint256)"(
      purchaser?: string | null,
      beneficiary?: string | null,
      saleAmount?: null,
      raiseAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        purchaser: string;
        beneficiary: string;
        saleAmount: BigNumber;
        raiseAmount: BigNumber;
      }
    >;

    CrowdsaleTokensPurchased(
      purchaser?: string | null,
      beneficiary?: string | null,
      saleAmount?: null,
      raiseAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        purchaser: string;
        beneficiary: string;
        saleAmount: BigNumber;
        raiseAmount: BigNumber;
      }
    >;

    "CrowdsaleVestingVaultUpdated(address,address)"(
      newVestingVault?: null,
      prevVestingVault?: null
    ): TypedEventFilter<
      [string, string],
      { newVestingVault: string; prevVestingVault: string }
    >;

    CrowdsaleVestingVaultUpdated(
      newVestingVault?: null,
      prevVestingVault?: null
    ): TypedEventFilter<
      [string, string],
      { newVestingVault: string; prevVestingVault: string }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    balanceOf(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyTokens(
      beneficiary: string,
      raiseAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    canRefundable(overrides?: CallOverrides): Promise<BigNumber>;

    capReached(overrides?: CallOverrides): Promise<BigNumber>;

    getClosingTime(overrides?: CallOverrides): Promise<BigNumber>;

    getContribution(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpeningTime(overrides?: CallOverrides): Promise<BigNumber>;

    getRaiseAmountFromSaleAmount(
      saleAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRaiseToken(overrides?: CallOverrides): Promise<BigNumber>;

    getRaiseTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getRate(overrides?: CallOverrides): Promise<BigNumber>;

    getSaleAmountFromRaiseAmount(
      raiseAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSaleCap(overrides?: CallOverrides): Promise<BigNumber>;

    getSaleLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getSaleToken(overrides?: CallOverrides): Promise<BigNumber>;

    getSaleTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getVestingVault(overrides?: CallOverrides): Promise<BigNumber>;

    isFinished(overrides?: CallOverrides): Promise<BigNumber>;

    isOpen(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRate(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSaleCap(
      minSaleCap: BigNumberish,
      maxSaleCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSaleLimit(
      minSaleLimit: BigNumberish,
      maxSaleLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTime(
      openingTime: BigNumberish,
      closingTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVestingVault(
      vestingVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyTokens(
      beneficiary: string,
      raiseAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    canRefundable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    capReached(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClosingTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContribution(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpeningTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRaiseAmountFromSaleAmount(
      saleAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRaiseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRaiseTokenBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSaleAmountFromRaiseAmount(
      raiseAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSaleCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSaleLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSaleToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSaleTokenBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVestingVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isFinished(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOpen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRate(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSaleCap(
      minSaleCap: BigNumberish,
      maxSaleCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSaleLimit(
      minSaleLimit: BigNumberish,
      maxSaleLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTime(
      openingTime: BigNumberish,
      closingTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVestingVault(
      vestingVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
