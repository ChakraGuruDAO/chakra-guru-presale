/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface VestingVaultMetaInterface extends ethers.utils.Interface {
  functions: {
    "getStatus()": FunctionFragment;
    "getToken()": FunctionFragment;
    "getVestingInfo()": FunctionFragment;
    "getZeroDate()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "getStatus", values?: undefined): string;
  encodeFunctionData(functionFragment: "getToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getVestingInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getZeroDate",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "getStatus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVestingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getZeroDate",
    data: BytesLike
  ): Result;

  events: {
    "VaultStatusUpdated(uint8,uint8)": EventFragment;
    "VaultTokenChanged(address)": EventFragment;
    "VaultVestingInfoChanged(uint256[],uint256[],uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "VaultStatusUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultTokenChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultVestingInfoChanged"): EventFragment;
}

export type VaultStatusUpdatedEvent = TypedEvent<
  [number, number] & { newStatus: number; prevStatus: number }
>;

export type VaultTokenChangedEvent = TypedEvent<[string] & { token: string }>;

export type VaultVestingInfoChangedEvent = TypedEvent<
  [BigNumber[], BigNumber[], BigNumber] & {
    unlockingTimes: BigNumber[];
    percents: BigNumber[];
    precision: BigNumber;
  }
>;

export class VestingVaultMeta extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VestingVaultMetaInterface;

  functions: {
    getStatus(overrides?: CallOverrides): Promise<[number]>;

    getToken(overrides?: CallOverrides): Promise<[string]>;

    getVestingInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], BigNumber] & {
        vestingPortionsUnlockTime: BigNumber[];
        vestingPercentPerPortion: BigNumber[];
        vestingPercentPrecision: BigNumber;
      }
    >;

    getZeroDate(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  getStatus(overrides?: CallOverrides): Promise<number>;

  getToken(overrides?: CallOverrides): Promise<string>;

  getVestingInfo(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[], BigNumber] & {
      vestingPortionsUnlockTime: BigNumber[];
      vestingPercentPerPortion: BigNumber[];
      vestingPercentPrecision: BigNumber;
    }
  >;

  getZeroDate(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    getStatus(overrides?: CallOverrides): Promise<number>;

    getToken(overrides?: CallOverrides): Promise<string>;

    getVestingInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], BigNumber] & {
        vestingPortionsUnlockTime: BigNumber[];
        vestingPercentPerPortion: BigNumber[];
        vestingPercentPrecision: BigNumber;
      }
    >;

    getZeroDate(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "VaultStatusUpdated(uint8,uint8)"(
      newStatus?: null,
      prevStatus?: null
    ): TypedEventFilter<
      [number, number],
      { newStatus: number; prevStatus: number }
    >;

    VaultStatusUpdated(
      newStatus?: null,
      prevStatus?: null
    ): TypedEventFilter<
      [number, number],
      { newStatus: number; prevStatus: number }
    >;

    "VaultTokenChanged(address)"(
      token?: null
    ): TypedEventFilter<[string], { token: string }>;

    VaultTokenChanged(
      token?: null
    ): TypedEventFilter<[string], { token: string }>;

    "VaultVestingInfoChanged(uint256[],uint256[],uint256)"(
      unlockingTimes?: null,
      percents?: null,
      precision?: null
    ): TypedEventFilter<
      [BigNumber[], BigNumber[], BigNumber],
      {
        unlockingTimes: BigNumber[];
        percents: BigNumber[];
        precision: BigNumber;
      }
    >;

    VaultVestingInfoChanged(
      unlockingTimes?: null,
      percents?: null,
      precision?: null
    ): TypedEventFilter<
      [BigNumber[], BigNumber[], BigNumber],
      {
        unlockingTimes: BigNumber[];
        percents: BigNumber[];
        precision: BigNumber;
      }
    >;
  };

  estimateGas: {
    getStatus(overrides?: CallOverrides): Promise<BigNumber>;

    getToken(overrides?: CallOverrides): Promise<BigNumber>;

    getVestingInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getZeroDate(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVestingInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getZeroDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
